{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["algoliaUrl","Date","getFullYear","changed","SearchBar","setCondition","useState","remote","setRemote","search","setSearch","location","setLocation","useEffect","id","type","onChange","e","target","value","replace","split","onClick","Jobs","comments","condition","hidden","setHidden","console","log","commentCode","sort","a","b","date","filter","c","term","comment","toLowerCase","includes","line","parseLocation","map","i","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","author","postId","length","App","setComments","fetch","then","response","json","data","hits","h","title","created_at","objectID","forEach","t","newComments","parent_id","comment_text","push","match","undefined","will_relocate","Candidate","className","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33df7264.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\n\nconst algoliaUrl = `https://hn.algolia.com/api/v1/search_by_date?query=Ask%20HN:%20${new Date().getFullYear()}&tags=ask_hn,author_whoishiring&hitsPerPage=1000`;\nlet changed = false;\n\nfunction Candidate(author, comment, date, postId) {\n  // TODO: Parse comment here to add additional optional fields\n  return {\n    author, comment, date, postId,\n    remote: !!comment.toLowerCase().replace(/\\s+/g, '').match(/remote:y/g), // regex to find remote in comment\n    location: undefined,\n    will_relocate: undefined // ^^^^\n  };\n}\n\nfunction SearchBar({setCondition}) {\n  const [remote, setRemote] = useState(false);\n  const [search, setSearch] = useState([]);\n  const [location, setLocation] = useState([]);\n\n  useEffect(() => {\n    setCondition({remote, search, location})\n  }, [remote, search, location, setCondition]);\n  \n  return (\n    <div id=\"search-bar\">\n      Skills: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"text\" onChange={e=>setSearch(e.target.value.replace(/\\s+/g, '').split(\",\"))}/> <em>(comma seperated, eg: React, Django, Security)</em><br/>\n      Location: <input type=\"text\" onChange={e=>setLocation(e.target.value)} /><br />\n      Remote: &nbsp;<input type=\"checkbox\" onClick={()=>setRemote(!remote)} />\n    </div>\n  )\n}\n\nfunction parseLocation(comment) {\n  for (const line of comment.toLowerCase().split(/<p|\\n/)) {\n    if (line.includes(\"location\")) {\n      return line;\n    }\n  }\n  return \"\";\n}\n\nfunction Jobs({comments, condition}) {\n  const [hidden, setHidden] = useState(true);\n  useEffect(() => {\n  }, [comments]);\n  console.log(condition)\n  const commentCode = comments\n    .sort((a, b) => new Date(b.date) - new Date(a.date))\n    .filter(c => {\n      if (condition.remote && c.remote !== condition.remote) {\n        return false;\n      }\n      for (const term of condition.search) {\n        if (!c.comment.toLowerCase().includes(term.toLowerCase())) {\n          return false;\n        }\n      }\n      if (condition.location && !parseLocation(c.comment).includes(condition.location)) {\n        return false;\n      }\n      return true;\n    }).map(\n      (e, i) => (\n        /*\n          We dangerously set inner HTML. In theory, as long as HN's XSS filtering is good to go,\n          we should be fine, since we only receive HTML served from HN and they already filter for this.\n          But just in case, we use DOMPurify to remove XSS from the comments.\n        */\n        <div dangerouslySetInnerHTML={{__html:DOMPurify.sanitize(`\n          <div class=\"posting\" key=${i}>\n            <b>Author:</b> <a href=\"https://news.ycombinator.com/user?id=${e.author}\">${e.author}</a><br />\n            <b>Date:</b> <a href=\"https://news.ycombinator.com/item?id=${e.postId}\">${e.date}</a>\n            <p />${e.comment}<p />\n          </div>\n          <hr />`)\n        }}/>\n      )\n    );\n  return (\n    <div id=\"candidates-container\">\n      <div id=\"show-button-line\">{commentCode.length} jobseekers match your search requirements&nbsp;&nbsp;&nbsp;\n      <span onClick={()=>setHidden(!hidden)}>{hidden ? \"show ▼\" : \"hide ▲\"}</span></div>\n      {hidden ? \"\" : commentCode}\n    </div>\n  )\n}\n\nfunction App() {\n  const [comments, setComments] = useState([]);\n  const [condition, setCondition] = useState(null);\n\n  useEffect(() => {\n    setComments([])\n    if (!changed) {\n      fetch(algoliaUrl)\n      .then(response => response.json())\n      .then(data => {\n        data.hits\n          .filter(h => h.title.includes(\"wants\") && h.created_at.includes(new Date().getFullYear()))\n          .map(h => h.objectID)\n          .forEach(t => {\n            fetch(`https://hn.algolia.com/api/v1/search_by_date?query=&tags=comment,story_${t}&hitsPerPage=1000`)\n            .then(response => response.json())\n            .then(data => {\n              const newComments = [];\n              data.hits\n                .filter(c => `${c.parent_id}` === `${t}`)\n                .forEach( ({author, comment_text, created_at, objectID}) => {\n                newComments.push(\n                  Candidate(author, comment_text, created_at, objectID)\n                );\n              })\n              setComments(c => [...newComments, ...c]);\n            });\n          });\n      });\n    }\n    changed = true;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <center><h1>HN Candidates Search</h1>\n      <div id=\"author\">by <a href=\"https://github.com/seisvelas/hn-candidates-search\" id=\"xandre\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Xandre</a></div></center>\n      <SearchBar setCondition={setCondition} />\n      <Jobs comments={comments} condition={condition} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}